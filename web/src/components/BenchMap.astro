---
import { getSites } from "../data";

interface Props {
  highlightSiteId?: number;
  height?: string | null;
}

const { highlightSiteId } = Astro.props;
const height = Astro.props.height || "600px";

const sites = await getSites();
---

<bench-map data-sites={JSON.stringify(sites)} data-highlight={highlightSiteId}>
  <a class="hidden-nav before" href="#">Skip after map</a>
  <div style={`height: ${height};`}></div>
  <a class="hidden-nav after" href="#">Skip before map</a>
</bench-map>
<script>
  import "leaflet/dist/leaflet.css";
  import L, { MarkerClusterGroup } from "leaflet";
  import type {
    TileLayerOptions,
    LayerGroup,
    MarkerOptions,
    DivIcon,
  } from "leaflet";
  import "leaflet.markercluster";
  import { Hsluv } from "hsluv";
  import type { BenchStatus, Site } from "../data";
  import { darkMode } from "../browser";
  import { MAX_BOUNDS, MAX_ZOOM } from "../pages/tile/[d].[z].[x].[yr].png";

  function hsluvToHex(h: number, s: number, l: number): string {
    const conv = new Hsluv();
    conv.hsluv_h = h;
    conv.hsluv_s = s;
    conv.hsluv_l = l;
    conv.hsluvToHex();
    return conv.hex;
  }

  const COLOR_GOOD = "#11734b";
  const COLOR_OK = "#215a6c";
  const COLOR_WARN = "#753800";
  const COLOR_INFO = "#5a3286";
  const COLOR_BAD = "#b10202";
  const COLOR_GOOD_WARN = "#496010";

  const ShadowDivIcon = L.DivIcon.extend({
    createShadow(oldIcon?: HTMLElement) {
      return this.createIcon(oldIcon);
    },
  }) as any as typeof DivIcon;

  function makePin(iconColor: string, text?: string): L.DivIcon {
    const size = 22;
    const div = document.createElement("div");
    div.style.setProperty("--icon-color", iconColor);
    div.style.lineHeight = `${size}px`;
    div.style.fontSize = `${size * 0.65}px`;
    div.innerText = text || "";

    return new ShadowDivIcon({
      html: div.outerHTML, // Using `div` directly doesn't work as it can only exist once in the DOM.
      className: "pin",
      iconSize: [size, size],
      iconAnchor: [size / 2, size * 1.5],
      popupAnchor: [0, -size],
    });
  }
  function makeFlag(scale: number, text?: string): L.DivIcon {
    const width = 6 + 6 * (text?.length || 1);
    const height = 24;
    const div = document.createElement("div");

    const h = (260 + 120 * scale) % 360;
    const s = 20 + 80 * scale;
    const l = 5 + 55 * scale;

    div.style.setProperty("--icon-color", hsluvToHex(h, s, l));
    div.style.color = `hsl(0 0 ${60 + 40 * scale}%)`;
    const lineHeight = 0.7 * height;
    div.style.lineHeight = `${lineHeight}px`;
    div.style.fontSize = `${0.7 * lineHeight}px`;
    div.innerText = text || "";

    return new L.DivIcon({
      html: div.outerHTML, // Using `div` directly doesn't work as it can only exist once in the DOM.
      className: "flag",
      iconSize: [width, height],
      iconAnchor: [1, height],
      popupAnchor: [0.5 * width, -0.9 * height],
    });
  }

  const [iconGood, iconOk, iconWarn, iconInfo, iconBad] = [
    COLOR_GOOD,
    COLOR_OK,
    COLOR_WARN,
    COLOR_INFO,
    COLOR_BAD,
  ].map((color) => makePin(color));
  const icons = {
    Good: iconGood,
    Replaced: iconOk,
    ["Attention Needed"]: iconWarn,
    Retrieved: iconInfo,
    Destroyed: iconInfo,
    Removed: iconBad,
  };

  class BenchMap extends HTMLElement {
    connectedCallback() {
      const searchParams = new URLSearchParams(window.location.search);

      const clusterOptions: L.MarkerClusterGroupOptions = {
        showCoverageOnHover: false,
        spiderfyOnMaxZoom: false,
        disableClusteringAtZoom: MAX_ZOOM,
        maxClusterRadius: searchParams.get('nocluster') ? 0 : 20,
      };
      const benchesGroup = L.markerClusterGroup({
        iconCreateFunction(cluster) {
          const childCount = cluster.getChildCount();
          const benchStatuses = cluster
            .getAllChildMarkers()
            .map(
              (m) => (m.options as { benchStatus: BenchStatus }).benchStatus
            );

          const pctGood =
            benchStatuses.filter((s) => "Good" === s || "Replaced" === s)
              .length / benchStatuses.length;
          const pctBad =
            benchStatuses.filter((s) => "Removed" === s || "Destroyed" === s)
              .length / benchStatuses.length;

          let color;
          if (0.8 <= pctGood) {
            color = COLOR_GOOD;
          } else if (0.5 < pctGood) {
            color = COLOR_GOOD_WARN;
          } else if (0.9 <= pctBad) {
            color = COLOR_BAD;
          } else {
            color = COLOR_WARN;
          }

          return makePin(color, "" + childCount);
        },
        ...clusterOptions,
      });
      const proposedGroup = L.markerClusterGroup({
        iconCreateFunction(cluster) {
          const childCount = cluster.getChildCount();
          const allScales = cluster
            .getAllChildMarkers()
            .map((m) => (m.options as { scale: number }).scale);
          const maxScale = Math.max(...allScales);

          return makeFlag(maxScale, "" + childCount);
        },
        ...clusterOptions,
      });

      // Add map.
      const map = L.map(this.getElementsByTagName("div")[0]!, {
        center: [
          Number(searchParams.get("lat")) || 37.82,
          Number(searchParams.get("lon")) || -122.3,
        ],
        zoom: Number(searchParams.get("zoom")) || 9,
        maxZoom: MAX_ZOOM,
        maxBounds: MAX_BOUNDS,
        maxBoundsViscosity: 1.0,
        layers: [
          L.tileLayer(`/tile/{d}.{z}.{x}.{y}{r}.png`, {
            maxZoom: MAX_ZOOM,
            attribution: import.meta.env.PUBLIC_MAP_ATTRIBUTION,
            d: () =>
              searchParams.has("mode", "l")
                ? "l"
                : searchParams.has("mode", "d")
                  ? "d"
                  : darkMode()
                    ? "d"
                    : "l",
          } as TileLayerOptions),
        ],
      });

      // Click popup handling.
      {
        const clickPopup = L.popup();
        map.on("click", (e) => {
          const { lat, lng } = e.latlng;

          const a = document.createElement("a");
          a.href = "/request?loc=" + encodeURIComponent(`(${lat}, ${lng})`);
          if (this.dataset.embed === "true") {
            a.target = "_top";
          }
          a.innerText = "Request A Bench Here";

          clickPopup.setLatLng(e.latlng).setContent(a).openOn(map);
        });
      }

      // Layer control.
      L.control
        .layers(
          {},
          {
            Benches: benchesGroup,
            "Proposed Locations": proposedGroup,
          }
        )
        .addTo(map);
      if (!searchParams.has("layer")) {
        // Default to showing benches.
        benchesGroup.addTo(map);
      } else {
        if (searchParams.has("layer", "benches")) {
          benchesGroup.addTo(map);
        }
        if (searchParams.has("layer", "proposed")) {
          proposedGroup.addTo(map);
        }
      }

      // Add markers to groups.
      // Read the message from the data attribute.
      const sites: Site[] = JSON.parse(this.dataset.sites!);
      for (const site of sites) {
        let scale = 0;
        let icon;
        let group: LayerGroup | MarkerClusterGroup;
        if ("Proposed" === site.benchStatus) {
          const c = 0.04;
          scale = Math.log2(c * site.avgWeekdayBoardings + 1);
          scale /= Math.log2(c * 150 + 1); // Scale so that 150 riders is 100%.
          scale = Math.max(0, Math.min(1, scale));
          icon = makeFlag(scale);
          group = proposedGroup;
        } else {
          icon = icons[site.benchStatus];
          group = benchesGroup;
        }
        console.assert(
          null != icon,
          `Unknown bench status: ${site.benchStatus}`
        );

        const marker = L.marker([site.lat, site.lon], {
          icon,
          benchStatus: site.benchStatus,
          scale,
        } as MarkerOptions).addTo(group);

        let head: Node = document.createTextNode(site.name || "Unknown");
        if (null != site.id) {
          const a = document.createElement("a");
          a.href = `/${site.id}`;
          const target = searchParams.get("target");
          a.target = /_[a-z]+/i.test(target!) ? target! : "_self";
          a.appendChild(head);
          head = a;
        }

        const popupDiv = document.createElement("div");
        {
          const h3 = document.createElement("h3");
          h3.appendChild(head);
          const p = document.createElement("p");
          if ("Proposed" === site.benchStatus) {
            p.innerText = `Proposed (${site.avgWeekdayBoardings} weekday boardings)`;
          } else {
            p.innerText = `Status: ${site.benchStatus}`;
          }
          popupDiv.appendChild(h3);
          popupDiv.appendChild(p);
        }

        const popup = marker.bindPopup(popupDiv);
        if (this.dataset.highlight === `${site.id}`) {
          popup.openPopup();
          map.setView([site.lat, site.lon], MAX_ZOOM);
        }
      }
    }
  }

  customElements.define("bench-map", BenchMap);

  document
    .querySelector<HTMLAnchorElement>(".hidden-nav.before")!
    .addEventListener("click", (e) => {
      e.preventDefault();
      document.querySelector<HTMLAnchorElement>(".hidden-nav.after")!.focus();
    });
  document
    .querySelector<HTMLAnchorElement>(".hidden-nav.after")!
    .addEventListener("click", (e) => {
      e.preventDefault();
      document.querySelector<HTMLAnchorElement>(".hidden-nav.before")!.focus();
    });
</script>

<style lang="scss">
  .hidden-nav {
    position: absolute;
    left: -9999px;
    background-color: var(--bg-color);

    &:focus {
      left: 0;
      z-index: 9999;
    }
    &.after {
      bottom: 0;
    }
  }

  bench-map {
    display: block;
    position: relative;

    :global(.pin > div) {
      text-align: center;

      color: #fff;
    }
    :global(.pin > div::after) {
      content: "";
      display: block;
      position: absolute;
      z-index: -1;

      box-sizing: border-box;
    }
    :global(.leaflet-marker-pane .pin > div::after) {
      top: 0;
      width: 100%;
      height: 100%;

      border-radius: 0 60% 100% 45% / 0 45% 100% 60%;
      background-color: var(--icon-color);

      border: 2.2px solid #000;
      transform: scaleY(1.5) rotate(225deg);
    }
    :global(.leaflet-shadow-pane .pin > div::after) {
      left: 50%;
      top: 155%;
      width: 100%;
      height: 100%;

      border-radius: 0 60% 100% 45% / 0 45% 100% 60%;
      background: radial-gradient(
        circle at 10% 10%,
        rgba(0, 0, 0, 0.6),
        rgba(0, 0, 0, 0) 70%
      );

      transform-origin: top left;
      transform: matrix(1, 0, -0.5, 0.6, 1, 0) scaleY(1.5) rotate(225deg);
    }

    :global(.flag > div) {
      position: relative;
      width: 100%;
      height: 100%;

      text-align: center;
      color: black;
      border-left: 3px solid #000;
      padding-right: 1.5px;
    }
    :global(.flag > div::after) {
      position: absolute;
      display: block;
      content: "";
      z-index: -1;

      top: 0;
      left: 0;
      right: -1.5px;
      bottom: 30%; /* must match `0.7 * height` */

      background-color: var(--icon-color);

      border: 3px solid #000;
      border-left: none;
    }

    :global(.leaflet-cluster-anim .leaflet-marker-icon),
    :global(.leaflet-cluster-anim .leaflet-marker-shadow) {
      /* `transform` needs to match Leaflet's tile zoom transition to prevent pins from moving around during zoom. */
      transition:
        transform 0.25s cubic-bezier(0, 0, 0.25, 1),
        opacity 0.3s ease-in;
    }
  }
</style>
